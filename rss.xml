<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Merit Network, Inc. Open Source and Technology RSS Feed]]></title><description><![CDATA[Open source and technology from Merit Network, Inc.]]></description><link>https://merit-network.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 04 May 2021 14:21:33 GMT</lastBuildDate><item><title><![CDATA[Summarize Median Values in ArcGIS Pro via R-ArcGIS Bridge]]></title><description><![CDATA[If you’ve ever longed for ‘median’ as an option in the dropdown list of Esri’s ‘Summarize Within’ tool when working with non-normally…]]></description><link>https://merit-network.github.io/summarize_within_median_r_arcgis/</link><guid isPermaLink="false">https://merit-network.github.io/summarize_within_median_r_arcgis/</guid><pubDate>Fri, 29 Jan 2021 10:50:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;If you’ve ever longed for ‘median’ as an option in the dropdown list of Esri’s ‘Summarize Within’ tool when working with non-normally distributed data, long no more! Use this script and the R-ArcGIS Bridge to fulfill your non-parametric function needs.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;When your data is not normally distributed, look outside the limited dropdown options for a solution that maintains the integrity of your data. The R-ArcGIS Bridge provides the ability to use R in scripting a statistical model (in this case calculating the median value based on geographic location) and ArcGIS Pro to run and incorporate the script into your larger Esri workflow.&lt;/p&gt;
&lt;h1&gt;Why would I need something other than the options Esri provides?&lt;/h1&gt;
&lt;p&gt;Have you ever been working on a project in ArcGIS Pro, realized you had skewed data, and then further realized ArcGIS Pro’s ‘Summarize Within’ tool limits you to a few options meant for normally distributed data? I certainly have. Rather than shrug your shoulders and think ‘ah well, the mean value is close enough…’ see if you can find a way to use a more appropriate statistical test.&lt;/p&gt;
&lt;p&gt;To put this idea in some context, I’m working on a current project gathering granular internet speed test results and then aggregating those granular speed tests up to the census block level. When looking at the distribution of internet speeds within geographic buckets, you’ll see that the distribution is highly skewed. A lot of the internet users may hang out around the 25 - 75 MBPS range for download speed, some may be at the 0 MBPS range, and then a smaller, but still substantial group, jump up to that 1G category, resulting in some major outliers, large tails, and large peaks.&lt;/p&gt;
&lt;p&gt;There is no question that this data does not satisfy the requirements of normally distributed data, meaning we should &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; use a parametric test (e.g. &lt;code class=&quot;language-text&quot;&gt;mean&lt;/code&gt;) to analyze the data. Using the &lt;code class=&quot;language-text&quot;&gt;mean&lt;/code&gt; function when aggregating these values up to the census block level would artificially push your average towards those outliers, misrepresenting what the ‘average’ person in that census block is really experiencing. When the purpose of this analysis is to provide data-driven insight into where new broadband infrastructure investments should be made, pushing the metric towards those high outliers is absolutely unacceptable. Fortunately, the median value of your data provides one option to better represent the true middle ground of what users on the ground are experiencing.&lt;/p&gt;
&lt;p&gt;This particular project has many components and is largely working in ArcGIS Pro’s model builder with some deeper statistics and figure generation happening in RStudio. Our goal is to have cohesion between these two programs, so we did not want a workflow that required us to run some analysis in ArcGIS Pro, leave this program and open up RStudio to run a custom-made script, and then go back into ArcGIS Pro to run the rest of the model. Luckily, Esri’s R-ArcGIS Bridge allows us to create the custom tool you’ll see below and then import that into the ArcGIS Pro interface whenever we want to calculate the median download and upload speeds for each census block in our study area.&lt;/p&gt;
&lt;h1&gt;R-ArcGIS Bridge provides a solution&lt;/h1&gt;
&lt;p&gt;In this post I’m going to focus more on the actual script to calculate the median values, with some callouts to the R-ArcGIS Bridge components. To use this solution, you will need the following installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R and Rstudio 3.5 or later (&lt;a href=&quot;https://rstudio-education.github.io/hopr/starting.html&quot;&gt;https://rstudio-education.github.io/hopr/starting.html&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;ArcGIS Pro 2.2 or later&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you’re new to the concept of the R-ArcGIS Bridge, you can fnd more detail here: &lt;a href=&quot;https://github.com/R-ArcGIS/r-bridge-install&quot;&gt;https://github.com/R-ArcGIS/r-bridge-install&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Let’s break down the code&lt;/h1&gt;
&lt;p&gt;You’ll need to first call the function that will allow you to bring this tool into ArcGIS Pro as a custom script that will prompt the user for input:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;tool_exec &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in_params&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; out_params&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#The rest of the code below goes in here&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ll need the following R packages and code to initialize the R-ArcGIS bridge:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;require&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#classes and methods for spatial data, https://cran.r-project.org/web/packages/sp/index.html&lt;/span&gt;
require&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;spatialEco&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#needed for the point.in.polygon() function, https://cran.r-project.org/web/packages/spatialEco/index.html&lt;/span&gt;
require&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arcgisbinding&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#initializes the R-ArcGIS bridge and connects your Esri license info&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;#tie your license into the session&lt;/span&gt;
arc.check_product&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we define the input and output parameters you want the user to provide via the tool interface in ArcGIS Pro:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;  polygon_input &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; in_params&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#in this case, the census blocks&lt;/span&gt;
  point_input &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; in_params&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#in this case, the points with the speed test data&lt;/span&gt;
  attribute_input &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; in_params&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#this must be the EXACT name of the field in the data table&lt;/span&gt;
  attribute_groupby &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; in_params&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#this must be the EXACT name of the field in the data table&lt;/span&gt;
  coord_system &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; in_params&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#user chooses Point or Polygon from dropdown for the coordinate system they want to use&lt;/span&gt;

  summarized_output &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; out_params&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#this is user provided&lt;/span&gt;
  Output_FC &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; out_params &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#this is derived&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, now we need to convert the user inputs to strings so that they will work properly in the rest of the script:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;  polygon_input &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; toString&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;polygon_input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  point_input &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; toString&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;point_input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  attribute_input &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; toString&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;attribute_input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  attribute_groupby &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; toString&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;attribute_groupby&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  summarized_output &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; toString&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;summarized_output&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’re now going to read in the GIS feature class, via &lt;code class=&quot;language-text&quot;&gt;arc.open()&lt;/code&gt;, and in the same line transform that into a data frame, via &lt;code class=&quot;language-text&quot;&gt;arc.select()&lt;/code&gt;, so we can work with it in R:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;  poly.df &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; arc.select&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arc.open&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;polygon_input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  point.df &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; arc.select&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arc.open&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;point_input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  print&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Polygon and point data have been converted to data frames&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we were just importing the feature class into RStudio to derive non-spatial statistics, we could stop at the data frame conversion. Since we will be perfoming spatial statistics, meaning that the actual location of the features is the prominent piece of the analysis (e.g. summarizing the median value of points residing inside a polygon vs answering the question ‘what is the median value of all survey responses’) one more conversion is needed. We need to convert the data frames into a &lt;strong&gt;&lt;em&gt;SpatialPointsDataFrame&lt;/em&gt;&lt;/strong&gt; and a &lt;strong&gt;&lt;em&gt;SpatialPolygonDataFrame&lt;/em&gt;&lt;/strong&gt; using the &lt;code class=&quot;language-text&quot;&gt;sp package&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;  poly.spdf &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; arc.data2sp&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;poly.df&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  point.spdf &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; arc.data2sp&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;point.df&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  print&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Data has been converted to spatial data frames&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before we can do any analysis between these two spatial data frames we need to ensure their projections match. At the top we have the user choose if they want the resulting feature class to be of the coordinate system of the point or polygon feature class. We’re assuming at least one of these feature classes has the desired coordinate system for output.&lt;/p&gt;
&lt;p&gt;For reference, the &lt;code class=&quot;language-text&quot;&gt;spTransform()&lt;/code&gt; function performs the actual projection and datum transformation and the &lt;code class=&quot;language-text&quot;&gt;CRS()&lt;/code&gt; function grabs the projection info of the input feature class as a class &lt;strong&gt;&lt;em&gt;character&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;#grab projection information of each spatial data frame as a string&lt;/span&gt;
  point_proj &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; proj4string&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;point.spdf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  poly_proj &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; proj4string&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;poly.spdf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;#check if the coordinate systems match, if they don&apos;t then reproject one based on user input&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;point_proj&lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt;poly_proj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;coord_system&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Point&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      poly.spdf &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; spTransform&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;poly.spdf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; CRS&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;point_proj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      point.spdf &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; spTransform&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;point.spdf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; CRS&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;poly.spdf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

print&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Coordinate systems have been checked and updated if necessary&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can finally get to the exciting part and do some stats! We’re going to attach a polygon ID to each point and then aggregate the median value of each point with the same polygon ID.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;#attach polygon attributes to each point, allowing for aggregation of a point numeric value by a polygon ID&lt;/span&gt;
  pts.poly &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; point.&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;.poly&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;point.spdf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;poly.spdf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

   &lt;span class=&quot;token comment&quot;&gt;#summarize points based on polygon ID via user input and update column names&lt;/span&gt;
  summarized_median &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; aggregate&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;pts.poly&lt;span class=&quot;token operator&quot;&gt;@&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;attribute_input&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; by&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pts.poly&lt;span class=&quot;token operator&quot;&gt;@&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;attribute_groupby&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; FUN&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;median&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; drop&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  colnames&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;summarized_median&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;attribute_groupby&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;paste&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Median&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;attribute_input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  print&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Median values aggregated&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We also will want the total number of points in each census block for a more robust understanding of our median metric:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;#count total amount of points within each polygon based on ID supplied by user&lt;/span&gt;
  summarized_count &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; aggregate&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;pts.poly&lt;span class=&quot;token operator&quot;&gt;@&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;attribute_input&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; by&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pts.poly&lt;span class=&quot;token operator&quot;&gt;@&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; attribute_groupby&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; FUN&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; drop&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  colnames&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;summarized_count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;attribute_groupby&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Total Point Count&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  print&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Total count aggregated&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To finish, we need to merge these outputs together and write the data to an Esri feature class:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;#merge median and count together into one table&lt;/span&gt;
  summarized_merged &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; merge&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;summarized_median&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; summarized_count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;by&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;attribute_groupby&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;#join table back to SpatialPolygonsDataFrame&lt;/span&gt;
  new_poly_spdf &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; merge&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;poly.spdf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; summarized_merged&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;by&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;attribute_groupby&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;#export to feature class&lt;/span&gt;
  Output_FC &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; arc.write&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;summarized_output&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; new_poly_spdf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s all the code! If you want to test this in RStudio before bringing it into ArcGIS Pro, simply comment out the initial function definition and parameter definitions, define the parameters as variables with the same name as the parameter definition, and run the code from there.&lt;/p&gt;
&lt;p&gt;For more information on creating a custom tool from your script in ArcGIS Pro, visit this site: &lt;a href=&quot;https://pro.arcgis.com/en/pro-app/latest/arcpy/geoprocessing_and_python/adding-a-script-tool.htm&quot;&gt;https://pro.arcgis.com/en/pro-app/latest/arcpy/geoprocessing_and_python/adding-a-script-tool.htm&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Closing thoughts&lt;/h1&gt;
&lt;p&gt;At the end of the day it is so important to stay true to your data, even if that means stepping outside of the preconfigured dropdowns your software provides. Some of the time your data may be normally distributed and you can use ArcGIS Pro’s ‘Summarize Within’ with no issues. In the cases where your data is non-parametric, doing a bit of extra work to seek out a non-parametic solution will maintain the integrity of your data and the R-ArcGIS Bridge makes this so much more doable.&lt;/p&gt;
&lt;p&gt;It is also worth noting that there are other way to deal with non-normally distributed data, such as removing outliers or transforming your data, that may work better for your specific project. The most important rule of thumb is to always use your brain first about what works best for the intended use of that data.&lt;/p&gt;
&lt;p&gt;Have a better way? Disagree? &lt;a href=&quot;https://github.com/merit-network/merit-network.github.io/issues&quot;&gt;Let us know&lt;/a&gt;!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How to Fail Gracefully]]></title><description><![CDATA[Fail Gracefully! Empower your users by providing them with applications that fail gracefully, or indicate clean error messaging without…]]></description><link>https://merit-network.github.io/how-to-fail-gracefully/</link><guid isPermaLink="false">https://merit-network.github.io/how-to-fail-gracefully/</guid><pubDate>Tue, 05 Jan 2021 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;&lt;strong&gt;Fail Gracefully!&lt;/strong&gt; Empower your users by providing them with applications that fail gracefully, or indicate clean error messaging without stopping them from getting the job done.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;If fail you must, then provide an accurate error message on the User Interface to guide users to resolve the issues.&lt;/p&gt;
&lt;h1&gt;What the heck does it mean?&lt;/h1&gt;
&lt;p&gt;“We are unable to perform this operation. We are sorry for the inconvenience, please check back later.” When throwing your computer out the window is not an option, what else can you do? Nothing.&lt;/p&gt;
&lt;p&gt;Most of the time we move on, just work through the thing, and try it a different way. Maybe an incognito window, maybe clear our cache, maybe restarting our computer? Not everybody has an automated way to debug an issue. If they did, then software companies everywhere would cease to exist.&lt;/p&gt;
&lt;h1&gt;Support the User&lt;/h1&gt;
&lt;p&gt;As Tech Support (yes, we are support, we create, we manage, we develop, we guide, but we support), we need to put ourselves back into the shoes of the User. We cannot always assume that the User is doing it wrong, because we build the applications for the User. The error checking in the code knows enough to display an error. At the very least, if the User is ‘doing it wrong’, then the error that we throw out should be smart enough to tell the User what happened. It is okay to be transparent- it fixes issues quicker, and builds trust with the user.&lt;/p&gt;
&lt;p&gt;What if instead of throwing a catch-all error and saying ‘open a ticket with support’, we take the time to &lt;strong&gt;at least&lt;/strong&gt; show the user what &lt;strong&gt;could&lt;/strong&gt; be wrong.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“Please enter value(s) for: Rejection Reason.”&lt;/li&gt;
&lt;li&gt;“There appears to be duplicated information for this Contact.”&lt;/li&gt;
&lt;li&gt;“Your totals do not balance, please review.”&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Let the User Decide&lt;/h1&gt;
&lt;p&gt;Instead of blocking the User from doing any work at all, consider warning the User and then logging the issue in an audit trail. Allow the User to save, because it might be something that will not negatively impact a background process that is running, or harm a future record that has not even been created yet. Do not assume that the User should not do a specific thing just because they do not know that they need it (yet).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Give them Options:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“Not all fields have been completed, do you wish to continue?”&lt;/li&gt;
&lt;li&gt;“Are you sure you want to abandon these changes?”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Giving users the option to move forward, save their changes, or cancel gives them the control that they need to be able to work. If users become frustrated using an application for data entry, they are more likely to abandon its use entirely and find an alternative, less-secure solution elsewhere on their own.&lt;/p&gt;
&lt;h1&gt;Closing thoughts&lt;/h1&gt;
&lt;p&gt;Talk to your Users. Find out what is important about their data entry application. Find out what types of data they would actually like to have validated. Ask them what they need to know when you alert them through the User Interface of an error. How should your code handle it? How do they want to work through it? Transparency in this will save you time, and also gain a positive relationship of trust with your users.&lt;/p&gt;
&lt;p&gt;Have a better way? Disagree? &lt;a href=&quot;https://github.com/merit-network/merit-network.github.io/issues&quot;&gt;Let us know&lt;/a&gt;!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Setting Django model fields automatically using Oracle Database sequences]]></title><description><![CDATA[Oracle Database not required! The following will detail working with things like sequences in Oracle database but the decorator and general…]]></description><link>https://merit-network.github.io/django-model-fields-oracle-database-sequences/</link><guid isPermaLink="false">https://merit-network.github.io/django-model-fields-oracle-database-sequences/</guid><pubDate>Wed, 11 Nov 2020 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;&lt;strong&gt;Oracle Database not required!&lt;/strong&gt; The following will detail working with things like sequences in Oracle database but the decorator and general approach can be used in any database supported by Django.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;Use the &lt;code class=&quot;language-text&quot;&gt;set_sql_for_field&lt;/code&gt; decorator below on your model’s &lt;code class=&quot;language-text&quot;&gt;save()&lt;/code&gt; method to get/set a sequence or any other arbitrary SQL.&lt;/p&gt;
&lt;h1&gt;An imperfect database for an imperfect world&lt;/h1&gt;
&lt;p&gt;Sometimes when working with existing or legacy databases you might run into less-than-perfect implementations of things like primary keys.&lt;/p&gt;
&lt;p&gt;Could be that when the database was created the database management system (DBMS) didn’t support things like &lt;code class=&quot;language-text&quot;&gt;AUTO_INCREMENT&lt;/code&gt; (MySQL) or &lt;code class=&quot;language-text&quot;&gt;IDENTITY&lt;/code&gt; (Oracle Database 12+). It could also be that those responsible had good reason to manually manage things or maybe didn’t know of a different way of doing things.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let’s say for reasons beyond this blog post that you cannot alter the existing databases/tables.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;Generating Django models&lt;/h1&gt;
&lt;p&gt;We’ll assume you’ve got your &lt;code class=&quot;language-text&quot;&gt;DATABASES&lt;/code&gt; setup correctly in Django’s settings and want to generate a model for the following Oracle Database table:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;-- example from: https://oracle-base.com/articles/misc/autonumber-and-identity&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; department &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  DEPARTMENT_ID NUMBER&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  DESCRIPTION   VARCHAR2&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; department &lt;span class=&quot;token keyword&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;CONSTRAINT&lt;/span&gt; dept_pk &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ID&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; SEQUENCE dept_seq&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To generate the Django model for this table:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;python manage.py inspectdb department &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; department/models.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should have a model that looks like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# departments/models.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;db &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; models

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Department&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Model&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    department_id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IntegerField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;primary_key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    description &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CharField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;max_length&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        db_table &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;department&apos;&lt;/span&gt;
        managed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ve got the necessary model code but we can’t save our model without errors! We need to get the next sequence and use it as the &lt;code class=&quot;language-text&quot;&gt;DEPARTMENT_ID&lt;/code&gt; when creating a new department.&lt;/p&gt;
&lt;h1&gt;Adding our Django model method decorator&lt;/h1&gt;
&lt;p&gt;Create/edit &lt;code class=&quot;language-text&quot;&gt;models.py&lt;/code&gt; in the root of your project/app and add:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; functools

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;set_sql_for_field&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;field&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sql&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token triple-quoted-string string&quot;&gt;&quot;&quot;&quot;
    Decorator for Model.save() to set SQL for field if empty.

    Example:

    class LegacyModel(models.Model):
        col1 = models.IntegerField(primary_key=True)
        col2 = models.IntegerField()

        @set_sql_for_field(&apos;col1&apos;, &apos;select col1_seq.nextval from dual&apos;)
        @set_sql_for_field(&apos;col2&apos;, &apos;select 1+max(col2) from legacy_model&apos;)
        def save(self, *args, **kwargs):
            super().save(*args, **kwargs)

    When this model is saved col1 and col2 will be set (if empty) to the output
    of the provided SQL within the schema/database of the model&apos;s app.
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decorator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;model_save_func&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@functools&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;wraps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;model_save_func&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;hasattr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; field&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;token string&quot;&gt;&apos;set_sql_for_field was given a field that does not exist on &apos;&lt;/span&gt;
                &lt;span class=&quot;token string&quot;&gt;&apos;the model. Double-check model fields and decorators for &apos;&lt;/span&gt;
                &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&apos;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__class__&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;field&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; and SQL &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; field&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;token comment&quot;&gt;# Multi-DB safe! Get DB for class from default manager.&lt;/span&gt;
                database &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__class__&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_default_manager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;db

                &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;db &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; connections
                &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; connections&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;database&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cursor&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; cursor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                    cursor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;execute&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&apos;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token builtin&quot;&gt;setattr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; field&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cursor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fetchone&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; model_save_func&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; wrapper
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; decorator&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Update the departments model to use our new decorator:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# departments/models.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;db &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; models
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; myapp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;models &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; set_sql_for_field

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Department&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Model&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    department_id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IntegerField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;primary_key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    description &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CharField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;max_length&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        db_table &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;department&apos;&lt;/span&gt;
        managed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;

    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@set_sql_for_field&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;department_id&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;select dept_seq.nextval from dual&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token builtin&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;save&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;That’s it!&lt;/strong&gt; Whenever we save our model the field &lt;code class=&quot;language-text&quot;&gt;department_id&lt;/code&gt; will be set using the next sequence from the database and it even works if we have multiple databases in our Django settings.&lt;/p&gt;
&lt;h1&gt;What about triggers?&lt;/h1&gt;
&lt;p&gt;It’s possible there is already a trigger on the table that will get/set the sequence when &lt;code class=&quot;language-text&quot;&gt;NULL&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;-- example from: https://oracle-base.com/articles/misc/autonumber-and-identity&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;REPLACE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TRIGGER&lt;/span&gt; dept_bir
BEFORE &lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; department
&lt;span class=&quot;token keyword&quot;&gt;FOR EACH ROW&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;new&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;department_id &lt;span class=&quot;token operator&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
  :new&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;department_id :&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dept_seq&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NEXTVAL&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s awesome but it can also lead to some weird issues/errors in Django (e.g., admin showing “None” when saving). If the trigger is setup to check NULL no harm in setting it ourselves but you should always check triggers for any tables when setting up new models in Django.&lt;/p&gt;
&lt;h1&gt;Advanced model method decorator usage&lt;/h1&gt;
&lt;p&gt;Let’s say you have a table without a primary key and without &lt;code class=&quot;language-text&quot;&gt;sequence&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;identity&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;auto_increment&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; dept_type &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TYPE_KEY NUMBER&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; DESCR VARCHAR2&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You look at some of the code using it and see that the &lt;code class=&quot;language-text&quot;&gt;TYPE_KEY&lt;/code&gt; was being set using this SQL:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;type_key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; dept_type&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run &lt;code class=&quot;language-text&quot;&gt;inspectdb&lt;/code&gt; like we did above and add our new decorator to get the final model:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# departments/models.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;db &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; models
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; myapp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;models &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; set_sql_for_field

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DepartmentType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Model&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    type_key &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IntegerField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;primary_key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    descr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CharField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;max_length&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        db_table &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;dept_type&apos;&lt;/span&gt;
        managed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;

    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@set_sql_for_field&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;type_key&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;select 1+max(type_key) from dept_type&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token builtin&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;save&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s all there is to it. We set &lt;code class=&quot;language-text&quot;&gt;primary_key&lt;/code&gt; on the &lt;code class=&quot;language-text&quot;&gt;type_key&lt;/code&gt; field to tell Django not to use the automatic &lt;code class=&quot;language-text&quot;&gt;id&lt;/code&gt; field (see &lt;a href=&quot;https://docs.djangoproject.com/en/3.1/topics/db/models/#automatic-primary-key-fields&quot;&gt;https://docs.djangoproject.com/en/3.1/topics/db/models/#automatic-primary-key-fields&lt;/a&gt;).&lt;/p&gt;
&lt;h1&gt;Additional model/field considerations&lt;/h1&gt;
&lt;p&gt;Depending on your models you may want to set certain fields as read-only in the Django admin or Django REST Framework to avoid them being set directly:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# departments/admin.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;contrib &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; admin
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; myapp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;departments&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;models &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; DepartmentType

&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@admin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;DepartmentType&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DepartmentTypeAdmin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;admin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ModelAdmin&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    list_display &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;__str__&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;type_key&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    readonly_fields &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;type_key&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    search_fields &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;=type_key&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;descr&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;token comment&quot;&gt;# departments/serializers.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; rest_framework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;serializers &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ModelSerializer
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; myapp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;departments&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;models &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; DepartmentType

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DepartmentTypeSerializer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ModelSerializer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        fields &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;__all__&apos;&lt;/span&gt;
        model &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DepartmentType
        read_only_fields &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;type_key&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Closing thoughts&lt;/h1&gt;
&lt;p&gt;When starting fresh try to follow best practices for your DBMS and lean on the default mechanisms your DBMS provides for working with primary keys and IDs.&lt;/p&gt;
&lt;p&gt;In Oracle Database, that might be using &lt;code class=&quot;language-text&quot;&gt;IDENTITY&lt;/code&gt; which uses sequences under the hood but has additional features like one-per-table and sane defaults (more at &lt;a href=&quot;https://oracle-base.com/articles/12c/identity-columns-in-oracle-12cr1&quot;&gt;https://oracle-base.com/articles/12c/identity-columns-in-oracle-12cr1&lt;/a&gt;). In other systems that might be &lt;code class=&quot;language-text&quot;&gt;AUTO_INCREMENT&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;AUTOINCREMENT&lt;/code&gt; or something comparable.&lt;/p&gt;
&lt;p&gt;There are absolutely times you may need to abandon auto-incrementing primary keys but if you get to that point you don’t need us telling you how you should do things!&lt;/p&gt;
&lt;p&gt;For the times you can’t start fresh or have had to get a bit more creative hopefully something like &lt;code class=&quot;language-text&quot;&gt;set_sql_for_field&lt;/code&gt; can help!&lt;/p&gt;
&lt;p&gt;Have a better way? Disagree? &lt;a href=&quot;https://github.com/merit-network/merit-network.github.io/issues&quot;&gt;Let us know&lt;/a&gt;!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Hello World]]></title><description><![CDATA[Welcome to our first post on our open source and technology site! 🎉 This post isn’t much to look at, but for us it’s a big step towards…]]></description><link>https://merit-network.github.io/hello-world/</link><guid isPermaLink="false">https://merit-network.github.io/hello-world/</guid><pubDate>Fri, 16 Oct 2020 14:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Welcome to our first post on our open source and technology site! 🎉&lt;/h1&gt;
&lt;p&gt;This post isn’t much to look at, but for us it’s a big step towards giving back to the community. We’re huge fans of open source and want to be sure we’re contributing whenever we can.&lt;/p&gt;
&lt;p&gt;As this site grows we hope to share what we know/learn working with things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.django-rest-framework.org/&quot;&gt;Django REST Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.elastic.co/elastic-stack&quot;&gt;Elastic Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;Gatsby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://graphql.org/&quot;&gt;GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mojolicious.org/&quot;&gt;Mojolicious&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.netsuite.com/&quot;&gt;NetSuite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.perl.org/&quot;&gt;Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.radb.net/&quot;&gt;Routing Assets Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zenoss.com/&quot;&gt;Zenoss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;…and more!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;This entire site is open source&lt;/h1&gt;
&lt;p&gt;As a start, &lt;a href=&quot;https://github.com/merit-network/merit-network.github.io&quot;&gt;this entire site is open source&lt;/a&gt; and MIT-licensed! It was built using &lt;a href=&quot;https://github.com/gatsbyjs/gatsby-starter-blog&quot;&gt;gatsby-starter-blog&lt;/a&gt; along with &lt;a href=&quot;https://bulma.io/&quot;&gt;Bulma&lt;/a&gt; and &lt;a href=&quot;https://fontawesome.com/&quot;&gt;Font Awesome&lt;/a&gt; and uses GitHub Actions for automatic builds and GitHub Pages for hosting.&lt;/p&gt;
&lt;p&gt;If you find something we should change or would like to contribute please &lt;a href=&quot;https://github.com/merit-network/merit-network.github.io/issues&quot;&gt;open an issue&lt;/a&gt; or &lt;a href=&quot;https://github.com/merit-network/merit-network.github.io/pulls&quot;&gt;submit a pull request&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have questions about contributing please check out &lt;a href=&quot;https://github.com/merit-network/merit-network.github.io/blob/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Stay tuned!&lt;/h1&gt;
&lt;p&gt;For the folks that use RSS we have an &lt;a href=&quot;/rss.xml&quot;&gt;RSS feed for this site&lt;/a&gt; and for everyone else…check back soon?&lt;/p&gt;
&lt;p&gt;We’ve got several ideas for posts and we’re committed to getting them out as soon as we can.&lt;/p&gt;</content:encoded></item></channel></rss>